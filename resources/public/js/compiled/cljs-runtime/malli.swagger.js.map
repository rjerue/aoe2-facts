{"version":3,"sources":["malli/swagger.cljc"],"mappings":"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","names":["malli$swagger$SwaggerSchema$_accept$dyn","x__4428__auto__","m__4429__auto__","malli.swagger/-accept","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","malli.swagger/SwaggerSchema","this","children","options","js/malli","js/malli.swagger","js/malli.swagger.accept","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__48621","cljs.core/MultiFn","cljs.core.symbol","malli.swagger/accept","name","_schema","_children","_options","schema","malli.json-schema/accept","_","cljs.core.assoc","cljs.core/first","cs","cljs.core.mapv","cljs.core/last","p__48652","map__48653","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","type","in","k","cljs.core._EQ_","cljs.core.not_EQ_","malli.swagger/-swagger-walker","p","cljs.core.merge","malli.core.type_properties","malli.core.properties","or__4126__auto__","malli.json-schema/unlift","malli.json-schema/select","cljs.core/native-satisfies?","malli.core.type","malli.json-schema/unlift-keys","malli.swagger/-transform","?schema","malli.core.walk","var_args","G__48677","malli.swagger/transform","js/Error","malli.swagger.transform","definitions","G__48682","cljs.core/deref","cljs.core/seq"],"sourcesContent":["(ns malli.swagger\n  (:require [malli.json-schema :as json-schema]\n            [malli.core :as m]))\n\n(defprotocol SwaggerSchema\n  (-accept [this children options] \"transforms schema to Swagger Schema\"))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [name schema children options] (json-schema/accept name schema children options))\n(defmethod accept 'float? [_ _ _ _] {:type \"number\" :format \"float\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'nil? [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] (assoc (first children) :x-allOf children))\n(defmethod accept :or [_ _ children _] (assoc (first children) :x-anyOf children))\n(defmethod accept :multi [_ _ children _] (let [cs (mapv last children)] (assoc (first cs) :x-anyOf cs)))\n\n(defmethod accept :maybe [_ _ children {:keys [type in]}]\n  (let [k (if (and (= type :parameter) (not= in :body)) :allowEmptyValue :x-nullable)]\n    (assoc (first children) k true)))\n\n(defmethod accept :tuple [_ _ children _] {:type \"array\" :items {} :x-items children})\n\n(defn- -swagger-walker [schema _ children options]\n  (let [p (merge (m/type-properties schema) (m/properties schema))]\n    (or (json-schema/unlift p :swagger)\n        (json-schema/unlift p :json-schema)\n        (merge (json-schema/select p)\n               (if (satisfies? SwaggerSchema schema)\n                 (-accept schema children options)\n                 (accept (m/type schema) schema children options))\n               (json-schema/unlift-keys p :json-schema)\n               (json-schema/unlift-keys p :swagger)))))\n\n(defn -transform [?schema options] (m/walk ?schema -swagger-walker options))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (let [definitions (atom {})\n         options (merge options {::m/walk-entry-vals true\n                                 ::json-schema/definitions definitions\n                                 ::json-schema/transform -transform})]\n     (cond-> (-transform ?schema options) (seq @definitions) (assoc :definitions @definitions)))))\n"]}