{"version":3,"sources":["malli/registry.cljc"],"mappings":"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","names":["js/goog.define","malli.registry/type","malli$registry$Registry$_schema$dyn","x__4428__auto__","m__4429__auto__","malli.registry/-schema","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","malli$registry$Registry$_schemas$dyn","malli.registry/-schemas","malli.registry/Registry","this","type","malli.registry/simple-registry","schemas","js/malli","js/malli.registry","js/malli.registry.t_malli$registry45987","malli.registry/t_malli$registry45987","_45989","meta45988","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","malli.registry/->t_malli$registry45987","_","cljs.core.get","malli.registry/registry","?registry","cljs.core/native-satisfies?","cljs.core/map?","malli.registry/registry*","cljs.core.atom","malli.registry/set-default-registry!","cljs.core/reset!","cljs.core.ex_info","malli.registry/custom-default-registry","js/malli.registry.t_malli$registry45999","malli.registry/t_malli$registry45999","_46001","meta46000","malli.registry/->t_malli$registry45999","cljs.core/deref","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","malli.registry/composite-registry","seq46013","self__4724__auto__","cljs.core/seq","?registries","registries","cljs.core.mapv","js/malli.registry.t_malli$registry46018","malli.registry/t_malli$registry46018","_46020","meta46019","malli.registry/->t_malli$registry46018","p1__46006#","cljs.core/some","cljs.core.reduce","cljs.core/merge","cljs.core.map","cljs.core/reverse","malli.registry/mutable-registry","db","js/malli.registry.t_malli$registry46041","malli.registry/t_malli$registry46041","_46043","meta46042","malli.registry/->t_malli$registry46041","malli.registry/*registry*","malli.registry/dynamic-registry","js/malli.registry.t_malli$registry46058","malli.registry/t_malli$registry46058","_46060","meta46059","malli.registry/->t_malli$registry46058","malli.registry/lazy-registry","default-registry","provider","cache*","registry*","malli.registry.composite_registry","js/malli.registry.t_malli$registry46075","malli.registry/t_malli$registry46075","_46077","meta46076","malli.registry/->t_malli$registry46075","name","or__4126__auto__","fexpr__46080","temp__5735__auto__","schema","G__46081","G__46082","cljs.core.swap_BANG_","cljs.core/assoc","malli.registry/schema","registry","malli.registry/schemas"],"sourcesContent":["(ns malli.registry\n  (:refer-clojure :exclude [type]))\n\n#?(:cljs (goog-define type \"default\")\n   :clj  (def type (as-> (or (System/getProperty \"malli.registry/type\") \"default\") $ (.intern $))))\n\n(defprotocol Registry\n  (-schema [this type] \"returns the schema from a registry\")\n  (-schemas [this] \"returns all schemas from a registry\"))\n\n(defn simple-registry [schemas]\n  (reify\n    Registry\n    (-schema [_ type] (get schemas type))\n    (-schemas [_] schemas)))\n\n(defn registry [?registry]\n  (cond (satisfies? Registry ?registry) ?registry\n        (map? ?registry) (simple-registry ?registry)))\n\n;;\n;; custom\n;;\n\n(def ^:private registry* (atom (registry {})))\n\n(defn set-default-registry! [?registry]\n  (if (identical? type \"custom\")\n    (reset! registry* (registry ?registry))\n    (throw (ex-info \"can't set default registry\" {:type type}))))\n\n(defn ^:no-doc custom-default-registry []\n  (reify\n    Registry\n    (-schema [_ type] (-schema @registry* type))\n    (-schemas [_] (-schemas @registry*))))\n\n(defn composite-registry [& ?registries]\n  (let [registries (mapv registry ?registries)]\n    (reify\n      Registry\n      (-schema [_ type] (some #(-schema % type) registries))\n      (-schemas [_] (reduce merge (map -schemas (reverse registries)))))))\n\n(defn mutable-registry [db]\n  (reify\n    Registry\n    (-schema [_ type] (get @db type))\n    (-schemas [_] @db)))\n\n(def ^:dynamic *registry* {})\n\n(defn dynamic-registry []\n  (reify\n    Registry\n    (-schema [_ type] (get *registry* type))\n    (-schemas [_] *registry*)))\n\n(defn lazy-registry [default-registry provider]\n  (let [cache* (atom {})\n        registry* (atom default-registry)]\n    (reset!\n      registry*\n      (composite-registry\n        default-registry\n        (reify\n          Registry\n          (-schema [_ name]\n            (or (@cache* name)\n                (when-let [schema (provider name @registry*)]\n                  (swap! cache* assoc name schema)\n                  schema)))\n          (-schemas [_] @cache*))))))\n\n(defn schema\n  \"finds a schema from a registry\"\n  [registry type]\n  (-schema registry type))\n\n(defn schemas\n  \"finds all schemas from a registry\"\n  [registry]\n  (-schemas registry))\n"]}