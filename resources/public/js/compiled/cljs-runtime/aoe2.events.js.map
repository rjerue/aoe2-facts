{"version":3,"sources":["aoe2/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","aoe2.db/default-db","re_frame.core.reg_event_fx","p__55638","p__55639","map__55640","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__55641","cljs.core.nth","map__55644","db","page","slug","set-page","cljs.core.assoc","G__55647","cljs.core/Keyword","p__55650","vec__55651","civs","p1__55648#","p2__55649#","cljs.core.reduce","p1__55654#","ajax.core.GET","re-frame.core/dispatch","cljs.core.js__GT_clj","p__55656","vec__55657","id","p1__55655#","cljs.core/assoc-in","p__55660","vec__55661","civ","units","cljs.core/not-empty","seq__55664","cljs.core/seq","chunk__55665","count__55666","i__55667","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","unit-url","aoe2.lib/final-slug","p__55669","vec__55670","p1__55668#","p__55674","vec__55675","unit","clojure.string/replace","clojure.string/lower-case"],"sourcesContent":["(ns aoe2.events\n  (:require\n   [re-frame.core :as re-frame]\n   [aoe2.db :as db]\n   [ajax.core :refer [GET]]\n   [aoe2.lib :as lib]\n   [clojure.string :as clojure.string]))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-fx\n ::set-active-panel\n (fn [{:keys [db]} [_ {page :page slug :slug}]]\n   (let [set-page (assoc db :active-panel page)]\n     (case page\n       :home-panel {:db set-page\n                    :fx [[:dispatch [::get-civilizations]]]}\n       :civ-panel {:db (assoc set-page :active-civilization slug)\n                   :fx [[:dispatch [::get-civilization slug]]]}\n       {:db set-page}))))\n\n(re-frame/reg-event-db\n ::set-civilizations\n (fn [db [_ civs]]\n   (assoc db\n          :civilizations (reduce #(assoc %1 (%2 \"id\") %2) {} civs)\n          :civilizations-loading-status :done)))\n\n(re-frame/reg-event-db\n ::error-civilizations\n (fn [db _]\n   (assoc db :civilizations [] :civilizations-loading :error)))\n\n(re-frame/reg-event-db\n ::get-civilizations\n (fn [db]\n   (GET \"https://cors-anywhere.herokuapp.com/https://age-of-empires-2-api.herokuapp.com/api/v1/civilizations\"\n     {:response-format :json\n      :handler #(re-frame/dispatch [::set-civilizations (js->clj (%1 \"civilizations\"))])\n      :error-handler #(re-frame/dispatch [::error-civilizations])})\n   (assoc db :civilizations {} :civilizations-loading :loading)))\n\n(re-frame/reg-event-db\n ::get-civilization\n (fn [db [_ id]]\n   (GET (str \"https://cors-anywhere.herokuapp.com/https://age-of-empires-2-api.herokuapp.com/api/v1/civilization/\" id)\n     {:response-format :json\n      :handler #(re-frame/dispatch [::set-civilization %1])\n      :error-handler #(re-frame/dispatch [::error-civilizations])})\n   (assoc-in db [:civilizations (str id) :loading] true)))\n\n(re-frame/reg-event-db\n ::set-civilization\n (fn [db [_ civ]]\n   (let [units (civ \"unique_unit\")]\n     (when (not-empty units) (doseq [unit-url units] (re-frame/dispatch [::get-unit (lib/final-slug unit-url)]))))\n   (assoc-in db [:civilizations (str (civ \"id\"))] (assoc civ :loading false))))\n\n(re-frame/reg-event-db\n ::get-unit\n (fn [db [_ id]]\n   (GET (str \"https://cors-anywhere.herokuapp.com/https://age-of-empires-2-api.herokuapp.com/api/v1/unit/\" id)\n     {:response-format :json\n      :handler #(re-frame/dispatch [::set-unit %1])\n      :error-handler #(re-frame/dispatch [::error-civilizations])})\n   (assoc-in db [:units (str id)] {:loading true})))\n\n(-> #(clojure.string/replace %1 #\"red\" \"blue\"))\n\n(re-frame/reg-event-db\n ::set-unit\n (fn [db [_ unit]]\n   (assoc-in db [:units (clojure.string/replace (-> \"name\" unit clojure.string/lower-case) \" \" \"_\")] (assoc unit :loading false))))"]}