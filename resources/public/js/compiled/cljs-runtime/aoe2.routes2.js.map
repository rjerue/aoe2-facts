{"version":3,"sources":["aoe2/routes2.cljs"],"mappings":";AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAIL,AAAKC,AACH,AAAA,AAAAC,AAAME;AAAN,AAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAyD,AAAA,AAAAH,AACA,AAAAA,AAAA,AAAA,AAAA,AAACI;;AAD3E,AAAAH,AAEMI;AAFN,AAEa,AAAAJ,AAACK,AAAiBR;;AAF/B,AAGE,AAACS,AAAYL,AAASG;;AAI1B,AAAA,AAAMG;AAAN,AAQE,AAAcT;;AAMhB,AAAKU,AAAQ,AAACC,AAAQC,AAAcb;AAKpC,AAAA,AAAMc,AACHC;AADH,AAEE,AAAkBd,AAAQc","names":["aoe2.routes2/routes","aoe2.routes2/history","p1__45947#","p1__45948#","dispatch","re-frame.core/dispatch","cljs.core.get_in","match","bidi.bidi/match-route","pushy.core/pushy","aoe2.routes2/start!","aoe2.routes2/url-for","cljs.core.partial","bidi.bidi/path-for","aoe2.routes2/set-token!","token"],"sourcesContent":["(ns aoe2.routes2\n  (:require [bidi.bidi :as bidi]\n            [pushy.core :as pushy]\n            [re-frame.core :as re-frame]\n            [aoe2.events :as events]))\n\n(def routes [\"/\" {\"\"      :home-panel\n                  \"about\" :about-panel\n                  \"civ/\" {[:slug] :civ-panel}}])\n\n(def history\n  (let [dispatch #(re-frame/dispatch [::events/set-active-panel {:page      (:handler %)\n                                                                 :slug      (get-in % [:route-params :slug])}])\n        match #(bidi/match-route routes %)]\n    (pushy/pushy dispatch match)))\n\n;; -- Router Start ------------------------------------------------------------\n;;\n(defn start!\n  []\n      ;; pushy is here to take care of nice looking urls. Normally we would have to\n      ;; deal with #. By using pushy we can have '/about' instead of '/#/about'.\n      ;; pushy takes three arguments:\n      ;; dispatch-fn - which dispatches when a match is found\n      ;; match-fn - which checks if a route exist\n      ;; identity-fn (optional) - extract the route from value returned by match-fn\n  (pushy/start! history))\n\n;; -- url-for -----------------------------------------------------------------\n;; To dispatch routes in our UI (view) we will use url-for and then pass a\n;; keyword to which route we want to direct the user.\n;; usage: (url-for :home)\n(def url-for (partial bidi/path-for routes))\n\n;; -- set-token! --------------------------------------------------------------\n;; To change route after some actions we will need to set url and for that we\n;; will use set-token! that needs history and the token\n(defn set-token!\n  [token]\n  (pushy/set-token! history token))\n\n"]}