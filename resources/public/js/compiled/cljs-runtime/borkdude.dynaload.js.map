{"version":3,"sources":["borkdude/dynaload.cljc"],"mappings":"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","names":["unused__10967__auto__","self__","G__45967","js/Error","args45965","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","borkdude.dynaload/LazyVar","borkdude.dynaload/->LazyVar","f","cached","this","x","fexpr__46005","cljs.core/deref","a","fexpr__46007","b","fexpr__46014","c","fexpr__46015","d","fexpr__46016","e","fexpr__46021","fexpr__46022","g","fexpr__46024","h","fexpr__46028","i","fexpr__46031","j","fexpr__46034","k","fexpr__46036","l","fexpr__46047","m","fexpr__46048","n","fexpr__46050","o","fexpr__46054","p","fexpr__46055","q","fexpr__46061","r","fexpr__46067","s","fexpr__46068","t","fexpr__46070","rest","cljs.core.apply"],"sourcesContent":["(ns borkdude.dynaload\n  #?(:cljs (:require-macros [borkdude.dynaload :refer [dynaload]])))\n\n(deftype LazyVar #?(:clj [f ^:volatile-mutable cached] :cljs [f ^:mutable cached])\n  #?(:clj clojure.lang.IDeref :cljs IDeref)\n  (#?(:clj deref :cljs -deref) [this]\n    (if-not (nil? cached)\n      cached\n      (let [x (f)]\n        (when-not (nil? x)\n          (set! cached x))\n        x)))\n  #?(:clj clojure.lang.IFn :cljs IFn)\n  (#?(:clj invoke :cljs -invoke) [this]\n    (@this))\n  (#?(:clj invoke :cljs -invoke) [this a]\n    (@this a))\n  (#?(:clj invoke :cljs -invoke) [this a b]\n    (@this a b))\n  (#?(:clj invoke :cljs -invoke) [this a b c]\n    (@this a b c))\n  (#?(:clj invoke :cljs -invoke) [this a b c d]\n    (@this a b c d))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e]\n    (@this a b c d e))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f]\n    (@this a b c d e f))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g]\n    (@this a b c d e f g))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h]\n    (@this a b c d e f g h))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i]\n    (@this a b c d e f g h i))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j]\n    (@this a b c d e f g h i j))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k]\n    (@this a b c d e f g h i j k))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l]\n    (@this a b c d e f g h i j k l))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m]\n    (@this a b c d e f g h i j k l m))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n]\n    (@this a b c d e f g h i j k l m n))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o]\n    (@this a b c d e f g h i j k l m n o))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p]\n    (@this a b c d e f g h i j k l m n o p))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q]\n    (@this a b c d e f g h i j k l m n o p q))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r]\n    (@this a b c d e f g h i j k l m n o p q r))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s]\n    (@this a b c d e f g h i j k l m n o p q r s))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t]\n    (@this a b c d e f g h i j k l m n o p q r s t))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t rest]\n    (apply @this a b c d e f g h i j k l m n o p q r s t rest))\n  #?(:clj\n     (applyTo [this args]\n              (apply @this args))))\n\n(defmacro ? [& {:keys [cljs clj]}]\n  (if (contains? &env '&env)\n    `(if (:ns ~'&env) ~cljs ~clj)\n    (if #?(:clj (:ns &env) :cljs true)\n      cljs\n      clj)))\n\n#?(:clj\n   (def resolve-at-compile-time? (= \"true\"\n                                    (System/getProperty \"borkdude.dynaload.aot\"))))\n\n#?(:clj (defonce ^:private dynalock (Object.)))\n\n#?(:clj\n   (defmacro ^:private locking2\n     \"Executes exprs in an implicit do, while holding the monitor of x.\n  Will release the monitor of x in all circumstances.\"\n     {:added \"1.0\"}\n     [x & body]\n     `(let [lockee# ~x]\n        (try\n          (let [locklocal# lockee#]\n            (monitor-enter locklocal#)\n            (try\n              ~@body\n              (finally\n                (monitor-exit locklocal#))))))))\n\n#?(:clj (def resolve*\n          (if resolve-at-compile-time?\n            (constantly nil)\n            (fn [sym]\n              (let [ns (namespace sym)]\n                (assert ns)\n                (try (locking2 dynalock\n                               (require (symbol ns)))\n                     (catch Exception _ nil))\n                (resolve sym))))))\n\n(defmacro dynaload\n  ([s] `(dynaload ~s {}))\n  ([[_quote s] opts]\n   #_{:clj-kondo/ignore[:redundant-let]}\n   (let [#?@(:clj [resolved-at-compile-time (when resolve-at-compile-time?\n                                              (resolve s))])]\n     `(#?(:clj borkdude.dynaload.LazyVar.\n          :cljs borkdude.dynaload/LazyVar.)\n       (fn []\n         (? :clj\n            (if-let [v# (or #?(:clj ~resolved-at-compile-time)\n                            (resolve* '~s))]\n              v#\n              (if-let [e# (find ~opts :default)]\n                (val e#)\n                (throw\n                 (ex-info\n                  (str \"Var \" '~s \" does not exist, \"\n                       (namespace '~s) \" never required\")\n                  {}))))\n            :cljs\n            (if (cljs.core/exists? ~s)\n              ~(vary-meta s assoc :cljs.analyzer/no-resolve true)\n              (if-let [e# (find ~opts :default)]\n                (val e#)\n                (throw\n                 (js/Error.\n                  (str \"Var \" '~s \" does not exist, \"\n                       (namespace '~s) \" never required\")))))))\n       nil))))\n"]}