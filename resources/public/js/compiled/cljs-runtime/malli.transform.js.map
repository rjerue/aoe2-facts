{"version":3,"sources":["malli/transform.cljc"],"mappings":"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","names":["malli.transform/*max-compile-depth*","malli.transform/-interceptor","?interceptor","schema","options","cljs.core/fn?","cljs.core/map?","cljs.core/contains?","compiled","cljs.core.assoc","malli.core._fail_BANG_","temp__5733__auto__","interceptor","G__48210","G__48211","G__48212","fexpr__48214","cljs.core.merge","cljs.core.dissoc","cljs.core/coll?","cljs.core.reduce","p__48237","p__48238","map__48242","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__48243","enter","leave","new-enter","new-leave","p1__48192#","and__4115__auto__","G__48247","or__4126__auto__","p1__48195#","G__48253","p1__48196#","cljs.core.keep","cljs.core/ifn?","malli.transform/-string->long","x","e48267","x'","cljs.core/re-find","cljs.core.subs","js/parseInt","js/isNaN","js/Error","_","malli.transform/-string->double","e48272","js/parseFloat","malli.transform/-number->double","malli.transform/-string->keyword","cljs.core.keyword","malli.transform/-string->boolean","cljs.core._EQ_","malli.transform/-string->uuid","e48284","cljs.core/uuid","malli.transform/-string->date","e48288","js/Date","js/goog.date.UtcDateTime.fromIsoString","malli.transform/-string->symbol","cljs.core.symbol","malli.transform/-string->nil","malli.transform/-any->string","malli.transform/-any->any","malli.transform/-date->string","cljs.core/inst?","e48298","p1__48299#","malli.transform/-transform-map-keys","f","G__48302","cljs.core.into","cljs.core.map","p__48303","vec__48304","cljs.core.nth","k","v","malli.transform/-sequential->set","cljs.core/set?","cljs.core/sequential?","cljs.core/set","malli.transform/-sequential->vector","cljs.core/vector?","cljs.core/vec","malli.transform/-sequential-or-set->vector","malli.transform/-sequential-or-set->seq","cljs.core/seq","malli.transform/-json-decoders","malli.transform/-json-encoders","malli.core/-keyword->string","malli.transform/-string-decoders","malli.transform/-string-encoders","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","malli.transform/transformer","seq48364","self__4724__auto__","?transformers","->data","ts","default","name","key","->eval","cljs.core/reduce-kv","malli.core.eval","->chain","malli.core._comp","malli.core/-transformer-chain","malli.core/-into-transformer","chain","cljs.core/identity","p1__48354#","cljs.core.mapcat","chain'","p1__48355#","cljs.core.mapv","G__48394","cljs.core/name","js/malli","js/malli.transform","js/malli.transform.t_malli$transform48402","malli.transform/t_malli$transform48402","_48404","meta48403","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","malli.transform/->t_malli$transform48402","method","p__48414","map__48416","map__48417","acc","transformers","malli.core.options","G__48433","malli.core.properties","G__48437","malli.core.type_properties","malli.core.type","G__48460","malli.transform/json-transformer","p__48464","map__48465","malli.transform.json_transformer","json-vectors","map-of-key-decoders","malli.transform.transformer","G__48477","malli.core.children","cljs.core/first","G__48472","malli.transform/string-transformer","G__48501","malli.transform/strip-extra-keys-transformer","p__48506","map__48507","malli.transform.strip_extra_keys_transformer","accept","p1__48495#","malli.core/properties","transform","ks","G__48519","malli.core.entries","cljs.core/not","cljs.core/keys","p__48536","map__48537","malli.transform/key-transformer","decode","encode","types","stage","cljs.core/zipmap","cljs.core.repeat","G__48568","malli.transform/default-value-transformer","p__48574","map__48576","malli.transform.default_value_transformer","defaults","get-default","G__48585","G__48592","p1__48556#","set-default","temp__5737__auto__","add-defaults","p__48606","vec__48611","map__48614","malli.transform/collection-transformer","coders"],"sourcesContent":["(ns malli.transform\n  #?(:cljs (:refer-clojure :exclude [Inst Keyword UUID]))\n  (:require #?@(:cljs [[goog.date.UtcDateTime]\n                       [goog.date.Date]])\n            [malli.core :as m])\n  #?(:clj (:import (java.util Date UUID)\n                   (java.time Instant ZoneId)\n                   (java.time.format DateTimeFormatter DateTimeFormatterBuilder)\n                   (java.time.temporal ChronoField))))\n\n(def ^:dynamic *max-compile-depth* 10)\n\n(defn -interceptor\n  \"Utility function to convert input into an interceptor. Works with functions,\n  map and sequence of those.\"\n  [?interceptor schema options]\n  (cond\n\n    (fn? ?interceptor)\n    {:enter ?interceptor}\n\n    (and (map? ?interceptor) (contains? ?interceptor :compile))\n    (let [compiled (::compiled options 0)\n          options (assoc options ::compiled (inc ^long compiled))]\n      (when (>= ^long compiled ^long *max-compile-depth*)\n        (m/-fail! ::too-deep-compilation {:this ?interceptor, :schema schema, :options options}))\n      (if-let [interceptor (-interceptor ((:compile ?interceptor) schema options) schema options)]\n        (merge\n          (dissoc ?interceptor :compile)\n          interceptor)))\n\n    (and (map? ?interceptor)\n         (or (contains? ?interceptor :enter)\n             (contains? ?interceptor :leave))) ?interceptor\n\n    (coll? ?interceptor)\n    (reduce\n      (fn [{:keys [enter leave]} {new-enter :enter new-leave :leave}]\n        (let [enter (if (and enter new-enter) #(new-enter (enter %)) (or enter new-enter))\n              leave (if (and leave new-leave) #(new-leave (leave %)) (or leave new-leave))]\n          {:enter enter :leave leave}))\n      (keep #(-interceptor % schema options) ?interceptor))\n\n    (nil? ?interceptor) nil\n\n    (ifn? ?interceptor)\n    {:enter ?interceptor}\n\n    :else (m/-fail! ::invalid-transformer {:value ?interceptor})))\n\n;;\n;; from strings\n;;\n\n(defn -string->long [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Long/parseLong x)\n         :cljs (let [x' (if (re-find #\"\\D\" (subs x 1)) ##NaN (js/parseInt x 10))] (if (js/isNaN x') x x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -string->double [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Double/parseDouble x)\n         :cljs (let [x' (js/parseFloat x)] (if (js/isNaN x') x x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -number->double [x]\n  (if (number? x) (double x) x))\n\n(defn -string->keyword [x]\n  (if (string? x)\n    (keyword x)\n    x))\n\n(defn -string->boolean [x]\n  (if (string? x)\n    (cond\n      (= \"true\" x) true\n      (= \"false\" x) false\n      :else x)\n    x))\n\n(defn -string->uuid [x]\n  (if (string? x)\n    (try\n      #?(:clj  (UUID/fromString x)\n         ;; http://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\n         :cljs (if (re-find #\"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" x)\n                 (uuid x)\n                 x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (def ^DateTimeFormatter +string->date-format+\n     (-> (DateTimeFormatterBuilder.)\n         (.appendPattern \"yyyy-MM-dd['T'HH:mm:ss]\")\n         (.optionalStart)\n         (.appendFraction ChronoField/MICRO_OF_SECOND, 0, 9, true)\n         (.optionalEnd)\n         (.optionalStart)\n         (.appendOffset \"+HHMMss\", \"Z\")\n         (.optionalEnd)\n         (.optionalStart)\n         (.appendOffset \"+HH:MM:ss\", \"Z\")\n         (.optionalEnd)\n         (.parseDefaulting ChronoField/HOUR_OF_DAY 0)\n         (.parseDefaulting ChronoField/OFFSET_SECONDS 0)\n         (.toFormatter))))\n\n(defn -string->date [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Date/from (Instant/from (.parse +string->date-format+ x)))\n         :cljs (js/Date. (.getTime (goog.date.UtcDateTime.fromIsoString x))))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (defn -string->decimal [x]\n     (if (string? x)\n       (try\n         (BigDecimal. ^String x)\n         (catch Exception _ x))\n       x)))\n\n(defn -string->symbol [x]\n  (if (string? x) (symbol x) x))\n\n(defn -string->nil [x]\n  (if (= \"\" x) nil x))\n\n;;\n;; misc\n;;\n\n(defn -any->string [x]\n  (if-not (nil? x) (str x)))\n\n(defn -any->any [x] x)\n\n#?(:clj\n   (def ^DateTimeFormatter +date->string-format+\n     (-> (DateTimeFormatter/ofPattern \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")\n         (.withZone (ZoneId/of \"UTC\")))))\n\n(defn -date->string [x]\n  (if (inst? x)\n    (try\n      #?(:clj  (.format +date->string-format+ (Instant/ofEpochMilli (inst-ms x)))\n         :cljs (.toISOString x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn -transform-map-keys [f]\n  #(cond->> % (map? %) (into {} (map (fn [[k v]] [(f k) v])))))\n\n;;\n;; sequential\n;;\n\n(defn -sequential->set [x]\n  (cond\n    (set? x) x\n    (sequential? x) (set x)\n    :else x))\n\n(defn -sequential->vector [x]\n  (cond\n    (vector? x) x\n    (sequential? x) (vec x)\n    :else x))\n\n;;\n;; sequential or set\n;;\n\n(defn -sequential-or-set->vector [x]\n  (cond\n    (vector? x) x\n    (set? x) (vec x)\n    (sequential? x) (vec x)\n    :else x))\n\n(defn -sequential-or-set->seq [x]\n  (cond\n    (vector? x) (seq x)\n    (set? x) (seq x)\n    :else x))\n\n;;\n;; decoders\n;;\n\n(defn -json-decoders []\n  {'ident? -string->keyword\n   'simple-ident? -string->keyword\n   'qualified-ident? -string->keyword\n\n   'keyword? -string->keyword\n   'simple-keyword? -string->keyword\n   'qualified-keyword? -string->keyword\n\n   'symbol? -string->symbol\n   'simple-symbol? -string->symbol\n   'qualified-symbol? -string->symbol\n\n   'uuid? -string->uuid\n   'double? -number->double\n   'inst? -string->date\n\n   :double -number->double\n   :keyword -string->keyword\n   :symbol -string->symbol\n   :qualified-keyword -string->keyword\n   :qualified-symbol -string->symbol\n   :uuid -string->uuid\n\n   :set -sequential->set})\n\n(defn -json-encoders []\n  {'keyword? m/-keyword->string\n   'simple-keyword? m/-keyword->string\n   'qualified-keyword? m/-keyword->string\n\n   'symbol? -any->string\n   'simple-symbol? -any->string\n   'qualified-symbol? -any->string\n\n   'uuid? -any->string\n\n   :keyword m/-keyword->string\n   :symbol -any->string\n   :qualified-keyword m/-keyword->string\n   :qualified-symbol -any->string\n   :uuid -any->string\n   ;:uri any->string\n   ;:bigdec any->string\n\n   'inst? -date->string\n   #?@(:clj ['ratio? -number->double])})\n\n(defn -string-decoders []\n  (merge\n    (-json-decoders)\n    {'integer? -string->long\n     'int? -string->long\n     'pos-int? -string->long\n     'neg-int? -string->long\n     'nat-int? -string->long\n     'zero? -string->long\n\n     :int -string->long\n     :double -string->double\n     :boolean -string->boolean\n\n     :> -string->long\n     :>= -string->long\n     :< -string->long\n     :<= -string->long\n     := -string->long\n     :not= -string->long\n\n     'number? -string->double\n     'float? -string->double\n     'double? -string->double\n     #?@(:clj ['rational? -string->double])\n     #?@(:clj ['decimal? -string->decimal])\n\n     'boolean? -string->boolean\n     'false? -string->boolean\n     'true? -string->boolean\n\n     :map-of (-transform-map-keys m/-keyword->string)\n     :vector -sequential->vector}))\n\n(defn -string-encoders []\n  (merge\n    (-json-encoders)\n    {'integer? -any->string\n     'int? -any->string\n     'pos-int? -any->string\n     'neg-int? -any->string\n     'nat-int? -any->string\n     'zero? -any->string\n\n     :int -any->string\n     :double -any->string\n     ;:boolean -any->string\n\n     :> -any->string\n     :>= -any->string\n     :< -any->string\n     :<= -any->string\n     := -any->string\n     :not= -any->string\n\n     'double -any->string}))\n\n;;\n;; transformers\n;;\n\n(defn transformer [& ?transformers]\n  (let [->data (fn [ts default name key] {:transformers ts\n                                          :default default\n                                          :key (if name (keyword (str key \"/\" name)))})\n        ->eval (fn [x options] (if (map? x) (reduce-kv (fn [x k v] (assoc x k (m/eval v options))) x x) (m/eval x)))\n        ->chain (m/-comp m/-transformer-chain m/-into-transformer)\n        chain (->> ?transformers (keep identity) (mapcat #(if (map? %) [%] (->chain %))) (vec))\n        chain' (->> chain (mapv #(let [name (some-> % :name name)]\n                                   {:decode (->data (:decoders %) (:default-decoder %) name \"decode\")\n                                    :encode (->data (:encoders %) (:default-encoder %) name \"encode\")})))]\n    (if (seq chain)\n      (reify\n        m/Transformer\n        (-transformer-chain [_] chain)\n        (-value-transformer [_ schema method options]\n          (reduce\n            (fn [acc {{:keys [key default transformers]} method}]\n              (let [options (or options (m/options schema))]\n                (if-let [?interceptor (or (some-> (get (m/properties schema) key) (->eval options))\n                                          (some-> (get (m/type-properties schema) key) (->eval options))\n                                          (get transformers (m/type schema))\n                                          default)]\n                  (let [interceptor (-interceptor ?interceptor schema options)]\n                    (if (nil? acc) interceptor (-interceptor [acc interceptor] schema options)))\n                  acc))) nil chain'))))))\n\n(defn json-transformer\n  ([]\n   (json-transformer nil))\n  ([{::keys [json-vectors map-of-key-decoders] :or {map-of-key-decoders (-string-decoders)}}]\n   (transformer\n     {:name :json\n      :decoders (-> (-json-decoders)\n                    (assoc :map-of {:compile (fn [schema _]\n                                               (or (some-> schema (m/children) (first) (m/type) map-of-key-decoders\n                                                           (m/-comp m/-keyword->string) (-transform-map-keys))\n                                                   (-transform-map-keys m/-keyword->string)))})\n                    (cond-> json-vectors (assoc :vector -sequential->vector)))\n      :encoders (-json-encoders)})))\n\n(defn string-transformer []\n  (transformer\n    {:name :string\n     :decoders (-string-decoders)\n     :encoders (-string-encoders)}))\n\n(defn strip-extra-keys-transformer\n  ([]\n   (strip-extra-keys-transformer nil))\n  ([{:keys [accept] :or {accept (m/-comp #(or (nil? %) (true? %)) :closed m/properties)}}]\n   (let [transform {:compile (fn [schema _]\n                               (if (accept schema)\n                                 (if-let [ks (some->> schema m/entries (map first) seq set)]\n                                   (fn [x] (reduce (fn [acc k] (if-not (ks k) (dissoc acc k) acc)) x (keys x))))))}]\n     (transformer\n       {:decoders {:map transform}\n        :encoders {:map transform}}))))\n\n(defn key-transformer [{:keys [decode encode types] :or {types #{:map}}}]\n  (let [transform (fn [f stage] (if f {stage (-transform-map-keys f)}))]\n    (transformer (cond (set? types) {:decoders (zipmap types (repeat (transform decode :enter)))\n                                     :encoders (zipmap types (repeat (transform encode :leave)))}\n                       (= :default types) {:default-decoder (transform decode :enter)\n                                           :default-encoder (transform encode :leave)}))))\n\n(defn default-value-transformer\n  ([]\n   (default-value-transformer nil))\n  ([{:keys [key defaults] :or {key :default}}]\n   (let [get-default (fn [schema] (let [default (some-> schema m/properties key)]\n                                    (if (some? default) default (some->> schema m/type (get defaults) (#(% schema))))))\n         set-default {:compile (fn [schema _]\n                                 (if-some [default (get-default schema)]\n                                   (fn [x] (if (nil? x) default x))))}\n         add-defaults {:compile (fn [schema _]\n                                  (let [defaults (->> (m/children schema)\n                                                      (keep (fn [[k {default key} v]]\n                                                              (if-some [default (if (some? default) default (get-default v))]\n                                                                [k default])))\n                                                      (into {}))]\n                                    (if (seq defaults)\n                                      (fn [x]\n                                        (if (map? x)\n                                          (reduce-kv\n                                            (fn [acc k v]\n                                              (if-not (contains? x k)\n                                                (assoc acc k v)\n                                                acc))\n                                            x defaults)\n                                          x)))))}]\n     (transformer\n       {:default-decoder set-default\n        :default-encoder set-default}\n       {:decoders {:map add-defaults}\n        :encoders {:map add-defaults}}))))\n\n(defn collection-transformer []\n  (let [coders {:vector -sequential-or-set->vector\n                :sequential -sequential-or-set->seq\n                :set -sequential->set}]\n    (transformer\n      {:decoders coders\n       :encoders coders})))\n"]}