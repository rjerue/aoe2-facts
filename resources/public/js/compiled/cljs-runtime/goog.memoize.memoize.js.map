{
"version":3,
"file":"goog.memoize.memoize.js",
"lineCount":27,
"mappings":"AAsBAA,IAAA,CAAKC,OAAL,CAAa,cAAb,CAAA;AAgBAD,IAAA,CAAKE,OAAL,GAAeC,QAAQ,CAACC,CAAD,EAAIC,cAAJ,CAAoB;AACzC,MAAMC,aAAaD,cAAbC,IAA+BN,IAA/BM,CAAoCJ,OAApCI,CAA4CC,gBAAlD;AAEA,SAIQ,QAAQ,EAAG;AACT,QAAIP,IAAJ,CAASE,OAAT,CAAiBM,cAAjB,CAAiC;AAU/B,UAAMC,eAAe,IAAfA,IAAuBT,IAAvBS,CAA4BC,MAAlC;AAGA,UAAMC,QAAQF,YAAA,CAAaT,IAAb,CAAkBE,OAAlB,CAA0BU,eAA1B,CAARD,KACDF,YAAA,CAAaT,IAAb,CAAkBE,OAAlB,CAA0BU,eAA1B,CADCD,GAC4C,EAD5CA,CAAN;AAEA,UAAME,MAAMP,UAAA,CAAWN,IAAA,CAAKc,MAAL,CAAYV,CAAZ,CAAX,EAA2BW,SAA3B,CAAZ;AACA,aAAOJ,KAAA,CAAMK,cAAN,CAAqBH,GAArB,CAAA,GACHF,KAAA,CAAME,GAAN,CADG,GAEFF,KAAA,CAAME,GAAN,CAFE,GAEWT,CAAA,CAAEa,KAAF,CAAQ,IAAR,EAAcF,SAAd,CAFlB;AAhB+B,KAAjC;AAoBE,aAAOX,CAAA,CAAEa,KAAF,CAAQ,IAAR,EAAcF,SAAd,CAAP;AApBF;AADS,GAJnB;AAHyC,CAA3C;AAqCAf,IAAA,CAAKE,OAAL,CAAaM,cAAb,GAA8BR,IAAA,CAAKkB,MAAL,CAAY,6BAAZ,EAA2C,IAA3C,CAA9B;AAQAlB,IAAA,CAAKE,OAAL,CAAaiB,UAAb,GAA0BC,QAAQ,CAACC,UAAD,CAAa;AAC7CA,YAAA,CAAWrB,IAAX,CAAgBE,OAAhB,CAAwBU,eAAxB,CAAA,GAA2C,EAA3C;AAD6C,CAA/C;AAUAZ,IAAA,CAAKE,OAAL,CAAaU,eAAb,GAA+B,wBAA/B;AAeAZ,IAAA,CAAKE,OAAL,CAAaK,gBAAb,GAAgCe,QAAQ,CAACC,WAAD,EAAcC,IAAd,CAAoB;AAC1D,MAAMC,UAAU,CAACF,WAAD,CAAhB;AACA,OAAK,IAAIG,IAAIF,IAAJE,CAASC,MAATD,GAAkB,CAA3B,EAA8BA,CAA9B,IAAmC,CAAnC,EAAsC,EAAEA,CAAxC;AACED,WAAA,CAAQG,IAAR,CAAa,MAAOJ,KAAA,CAAKE,CAAL,CAApB,EAA6BF,IAAA,CAAKE,CAAL,CAA7B,CAAA;AADF;AAGA,SAAOD,OAAA,CAAQI,IAAR,CAAa,MAAb,CAAP;AAL0D,CAA5D;;",
"sources":["goog/memoize/memoize.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tool for caching the result of expensive deterministic\n * functions.\n *\n * @see http://en.wikipedia.org/wiki/Memoization\n *\n */\n\ngoog.provide('goog.memoize');\n\n\n/**\n * Decorator around functions that caches the inner function's return values.\n *\n * To cache parameterless functions, see goog.functions.cacheReturnValue.\n *\n * @param {Function} f The function to wrap. Its return value may only depend\n *     on its arguments and 'this' context. There may be further restrictions\n *     on the arguments depending on the capabilities of the serializer used.\n * @param {function(number, Object): string=} opt_serializer A function to\n *     serialize f's arguments. It must have the same signature as\n *     goog.memoize.simpleSerializer. It defaults to that function.\n * @return {!Function} The wrapped function.\n */\ngoog.memoize = function(f, opt_serializer) {\n  const serializer = opt_serializer || goog.memoize.simpleSerializer;\n\n  return (/**\n           * @this {Object} The object whose function is being wrapped.\n           * @return {?} the return value of the original function.\n           */\n          function() {\n            if (goog.memoize.ENABLE_MEMOIZE) {\n              // In the strict mode, when this function is called as a global\n              // function, the value of 'this' is undefined instead of a global\n              // object. See:\n              // https://developer.mozilla.org/en/JavaScript/Strict_mode\n              // Otherwise, if memoize wraps a method of an object, `this` will\n              // be the context object, causing memoize to cache its values on\n              // the object instance, instead of on the global object.\n              // This (ha!) is a very surprising API, but retained for backwards\n              // compatibility.\n              const thisOrGlobal = this || goog.global;\n              // Maps the serialized list of args to the corresponding return\n              // value.\n              const cache = thisOrGlobal[goog.memoize.CACHE_PROPERTY_] ||\n                  (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] = {});\n              const key = serializer(goog.getUid(f), arguments);\n              return cache.hasOwnProperty(key) ?\n                  cache[key] :\n                  (cache[key] = f.apply(this, arguments));\n            } else {\n              return f.apply(this, arguments);\n            }\n          });\n};\n\n\n/**\n * @define {boolean} Flag to disable memoization in unit tests.\n */\ngoog.memoize.ENABLE_MEMOIZE = goog.define('goog.memoize.ENABLE_MEMOIZE', true);\n\n\n/**\n * Clears the memoization cache on the given object.\n * @param {Object} cacheOwner The owner of the cache. This is the `this`\n *     context of the memoized function.\n */\ngoog.memoize.clearCache = function(cacheOwner) {\n  cacheOwner[goog.memoize.CACHE_PROPERTY_] = {};\n};\n\n\n/**\n * Name of the property used by goog.memoize as cache.\n * @type {string}\n * @private\n */\ngoog.memoize.CACHE_PROPERTY_ = 'closure_memoize_cache_';\n\n\n/**\n * Simple and fast argument serializer function for goog.memoize.\n * Supports string, number, boolean, null and undefined arguments. Doesn't\n * support \\x0B characters in the strings.\n * @param {number} functionUid Unique identifier of the function whose result\n *     is cached.\n * @param {?{length:number}} args The arguments that the function to memoize is\n *     called with. Note: it is an array-like object, because it supports\n *     indexing and has the length property.\n * @return {string} The list of arguments with type information concatenated\n *     with the functionUid argument, serialized as \\x0B-separated string.\n */\ngoog.memoize.simpleSerializer = function(functionUid, args) {\n  const context = [functionUid];\n  for (let i = args.length - 1; i >= 0; --i) {\n    context.push(typeof args[i], args[i]);\n  }\n  return context.join('\\x0B');\n};\n"],
"names":["goog","provide","memoize","goog.memoize","f","opt_serializer","serializer","simpleSerializer","ENABLE_MEMOIZE","thisOrGlobal","global","cache","CACHE_PROPERTY_","key","getUid","arguments","hasOwnProperty","apply","define","clearCache","goog.memoize.clearCache","cacheOwner","goog.memoize.simpleSerializer","functionUid","args","context","i","length","push","join"]
}
