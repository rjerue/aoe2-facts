{"version":3,"sources":["aoe2/views.cljs"],"mappings":";AAOA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA+BM;AAA/B,AAAAF,AAAAJ,AAAA,AAAuCO;AAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACa,AAAA,AAAKD,AAAOC,AAAaD,AAAe,AAAA,AAAA,AAACE,AAAgCF,AAAKC;;AAE3F,AAAA,AAAME;AAAN,AACE,AAAMC,AAAc,AAAA,AAAA,AAACC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEG,AAAMC,AAAQ,AAAA,AAAAC,AAACC,AAAMJ;AAArB,AACE,AAAI,AAACK,AAAOH;AAAZ;;AAEE,AAACI,AAAIX,AAAuBO;;;;AAErC,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGUR;;AAGV,AAAA,AAAMS;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKe,AAAA,AAACV;;AAGhB,AAAA,AAAAW,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAAqBE;AAArB,AAAAlB,AAAAgB,AAAA,AAAkCG;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQD,AACA,AAAAE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAk6E2C,AAAA+C,AAAApD;AAl6E3CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOY;AAAP,AAAAV,AAAAF,AAAA,AAAA,AAAaa;AAAb,AAAA,AAAA,AAAAV,AAAAN,AAAA,AAAA,AAAA,AAAA,AACa,AAAKX,AAAM0B,AAAMC,AAAQA;;AADtC,AAAA,AAAAd,AAAA;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAlB;;AAAA,AAAAe,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAAC,AAAApB;AAAA,AAAAa,AAAAM,AAAA,AAAA,AAAOI;AAAP,AAAAV,AAAAM,AAAA,AAAA,AAAaK;AAAb,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAK,AAAAtB,AACa,AAAKH,AAAM0B,AAAMC,AAAQA;;;AADtC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAzB,AAAoB,AAAA,AAAA0B,AAAAC,AAACC;AAAD,AAAc,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAAH,AAAAC,AAAA;AAAe5B;;;AAGzD,AAAA,AAAM+B,AAAaC;AAAnB,AACE,AAAI,AAAA,AAAA,AAACA,AAAAA,AAAAA;AAAL;;AAEE,AAAA,AAAA,AAAK,AAAA,AAAA,AAACA,AAAAA,AAAAA,AAAmB,AAAA,AAAA,AAACA,AAAAA,AAAAA;;;AAE9B,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAMF,AAAK,AAAA,AAAA,AAAC5C,AAAgC8C;AAA5C,AACE,AAAA,AAAA5C,AAAO0C;AAAP,AACE,AAAA,AAAA1C,AAACyC,AAAaC;;AADhB;;;AAGJ,AAAA,AAAMG;AAAN,AAAA,AAAA,AAEG,AAAMpD,AAAG,AAAA,AAAA,AAACK;AAAV,AACE,AAAI,AAAA,AAAAE,AAAA,AAAOP;AAAX,AAAA,AAAA;;AAEE,AAAMqD,AAAO,AAAA,AAAA,AAAA,AAAA9C,AAACF,AAAyCL;AAAvD,AACE,AAAI,AAAA,AAAAO,AAAA,AAAO8C;AAAX,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAGQ,AAAA,AAAsB,AAAAC,AAAA,AAAA/C,AAAE8C;AAAF,AAAA,AAAAC,AAAAA,AAAA,AAAAA,AAAA;AAC3B,AAAI,AAAAC,AAAA,AAAAhD,AAAE8C;AAAF,AAAA,AAAAE,AAAAA,AAAA,AAAAA,AAAA;AAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGIxC,AAA0C,AAAAyC,AAAA,AAAAjD,AAAE8C;AAAF,AAAA,AAAAG,AAAAA,AAAA,AAAAA,AAAA;AAC3C,AAAMC,AAAS,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACE;AAAmB,AAAAC,AAAA,AAAAtD,AAAE8C;AAAF,AAAA,AAAAQ,AAAAA,AAAA,AAAAA,AAAA;;AACpC5C,AAAS,AAAC0C,AAAKT,AAAaO;AADlC,AAEE,AAAI,AAAK,AAAChD,AAAOgD,AAAU,AAACK,AAAI,AAAAC,AAAA,AAAAxD,AAAE8C;AAAF,AAAA,AAAAU,AAAAA,AAAA,AAAAA,AAAA;;AAAhC,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAEGhD,AACwBE;;;;;;;AAE5C,AAAA,AAAO+C,AAAQC;AAAf,AACE,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AACevD;;;AADf;AAAA,AAEgBC;;;AAFhB;AAAA,AAGcwC;;;;AAHd,AAAA;;;;AAMF,AAAA,AAAMgB,AAAYH;AAAlB,AAAA,AACGD,AAAOC;;AAEV,AAAA,AAAMI;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC4B,AAAA,AAACnE,AAE1B,AAAMoE,AAAa,AAAA,AAAA,AAACjE;AAApB,AAAA,AAAA,AAAA,AAAA,AAAAE,AACa6D,AAAYE","names":["p__55609","map__55610","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","aoe2.views/civilization-component","id","name","aoe2.routes/url-for","aoe2.views/civilization-link","civilizations","re_frame.core.subscribe","civ-seq","cljs.core/deref","cljs.core/vals","cljs.core/empty?","cljs.core.map","aoe2.views/home-panel","aoe2.views/about-panel","p__55614","map__55615","aoe2.views/content-list","title","elements","iter__4529__auto__","s__55618","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__55620","cljs.core/chunk-buffer","i__55619","vec__55621","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55617","cljs.core/chunk-rest","vec__55624","cljs.core/first","cljs.core/cons","cljs.core/rest","index","value","p1__55612#","p2__55613#","cljs.core.map_indexed","cljs.core/PersistentVector","aoe2.views/format-unit","unit","aoe2.views/unit-content","unit-id","aoe2.views/civ-panel","active","fexpr__55629","fexpr__55630","fexpr__55631","unit-ids","p1__55627#","cljs.core.mapv","aoe2.lib/final-slug","fexpr__55632","cljs.core/not","fexpr__55634","aoe2.views/panels","panel-name","G__55635","cljs.core/Keyword","aoe2.views/show-panel","aoe2.views/main-panel","active-panel","cljs.core/chunk-first"],"sourcesContent":["(ns aoe2.views\n  (:require\n   [re-frame.core :as re-frame]\n   [aoe2.subs :as subs]\n   [aoe2.routes :as routes]\n   [aoe2.lib :as lib]))\n\n(defn civilization-component [{id \"id\" name \"name\"}]\n  [:li {:key (str id \"-\" name) :value id} [:a {:href (routes/url-for :civ-panel :slug id)} name]])\n\n(defn civilization-link []\n  (let [civilizations (re-frame/subscribe [::subs/civilizations])]\n    [:ul {:name \"civiliztions\" :id \"civilizations\"}\n     (let [civ-seq (vals @civilizations)]\n       (if (empty? civ-seq)\n         \"Loading...\"\n         (map civilization-component civ-seq)))]))\n\n(defn home-panel []\n  [:div\n   [:h2 \"Select a civilization to learn more\"]\n   [:div [civilization-link]]\n   [:div]])\n\n(defn about-panel []\n  [:div\n   [:h1 \"This is the About Page.\"]\n\n   [:div\n    [:a {:href (routes/url-for :home-panel)}\n     \"go to Home Page\"]]])\n\n(defn content-list [{title :title elements :elements}]\n  [:div\n   [:h3 title]\n   [:ul (for [[index value] (map-indexed #(vector %1 %2) elements)]\n          [:li {:key (str title index value)} value])]])\n\n(defn format-unit [unit]\n  (if (unit :loading)\n    \"Loading...\"\n    (str (unit \"name\") \" - \" (unit \"description\") \".\")))\n\n(defn unit-content [unit-id]\n  (let [unit (re-frame/subscribe [::subs/unit unit-id])]\n    (when @unit\n      (format-unit @unit))))\n\n(defn civ-panel []\n  [:div\n   (let [id (re-frame/subscribe [::subs/active-civilization])]\n     (if (nil? @id)\n       [:h2 \"Error: 404\"]\n       (let [active (re-frame/subscribe [::subs/civilization @id])]\n         (if (nil? @active)\n           [:h2 \"Error: 404\"]\n           [:div\n            [:h2 (str \"Civilization: \" (@active \"name\"))]\n            (if (@active :loading)\n              [:p \"Loading...\"]\n              [:div\n               [content-list {:title \"Bonuses:\" :elements (@active \"civilization_bonus\")}]\n               (let [unit-ids (mapv #(lib/final-slug %1) (@active \"unique_unit\"))\n                     elements (mapv unit-content unit-ids)]\n                 (if (and (empty? unit-ids) (not (@active :loading)))\n                   [:p \"No unique units\"]\n                   [content-list {:title \"Unique Units:\"\n                                  :elements elements}]))])]))))])\n\n(defn- panels [panel-name]\n  (case panel-name\n    :home-panel [home-panel]\n    :about-panel [about-panel]\n    :civ-panel [civ-panel]\n    [:div]))\n\n(defn show-panel [panel-name]\n  [panels panel-name])\n\n(defn main-panel []\n  [:div [:header [:a {:href (routes/url-for :home-panel)} [:h1 \"Age of Empires 2 Facts\"]]\n         [:i \"AoE 2 is the second best video game ever (the OG KOTOR is #1), but it has the best API!\"]]\n   (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n     [:section [show-panel @active-panel]])])"]}