{"version":3,"sources":["malli/json_schema.cljc"],"mappings":"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","names":["malli$json-schema$JsonSchema$_accept$dyn","x__4428__auto__","m__4429__auto__","malli.json-schema/-accept","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","malli.json-schema/JsonSchema","this","children","options","malli.json-schema/-ref","x","p__48202","map__48206","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","malli.json-schema/-schema","schema","transform","definitions","result","G__48208","G__48209","malli.core.deref","temp__5733__auto__","ref","malli.core/-ref","cljs.core.swap_BANG_","cljs.core/assoc","malli.json-schema/unlift-keys","m","prefix","p1__48218#","p2__48217#","p3__48219#","cljs.core/reduce-kv","cljs.core._EQ_","cljs.core/name","cljs.core/namespace","cljs.core.assoc","cljs.core.keyword","malli.json-schema/unlift","malli.json-schema/select","cljs.core/select-keys","js/malli","js/malli.json-schema","js/malli.json-schema.accept","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__48252","cljs.core/MultiFn","cljs.core.symbol","malli.json-schema/accept","name","_schema","_children","_options","_","p__48370","vec__48371","cljs.core.nth","value","p__48377","vec__48378","p__48388","vec__48389","p__48392","vec__48395","cljs.core/first","required","cljs.core.filter","malli.core._comp","cljs.core/not","cljs.core/second","cljs.core.mapv","cljs.core/array-map","cljs.core.mapcat","p__48420","vec__48422","k","s","cljs.core/last","cljs.core.conj","malli.core.children","cljs.core.merge","malli.core.properties","clojure.set/rename-keys","p__48483","map__48484","G__48496","G__48497","p__48502","map__48503","G__48510","G__48511","p__48515","map__48516","G__48520","G__48521","malli.json-schema/-json-schema-walker","p","malli.core.type_properties","or__4126__auto__","cljs.core/native-satisfies?","malli.core.type","malli.json-schema/-transform","?schema","malli.core.walk","var_args","G__48554","malli.json-schema/transform","js/Error","malli.json_schema.transform","G__48567","cljs.core/deref","cljs.core/seq"],"sourcesContent":["(ns malli.json-schema\n  (:require [malli.core :as m]\n            [clojure.set :as set]))\n\n(defprotocol JsonSchema\n  (-accept [this children options] \"transforms schema to JSON Schema\"))\n\n(defn -ref [x] {:$ref (str \"#/definitions/\" x)})\n\n(defn -schema [schema {::keys [transform definitions] :as options}]\n  (let [result (transform (m/deref schema) options)]\n    (if-let [ref (m/-ref schema)]\n      (do (swap! definitions assoc ref result) (-ref ref))\n      result)))\n\n(defn unlift-keys [m prefix]\n  (reduce-kv #(if (= (name prefix) (namespace %2)) (assoc %1 (keyword (name %2)) %3) %1) {} m))\n\n(defn unlift [m prefix] (get m prefix))\n\n(defn select [m] (select-keys m [:title :description :default]))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [_ _ _ _] {})\n(defmethod accept 'any? [_ _ _ _] {})\n(defmethod accept 'some? [_ _ _ _] {})\n(defmethod accept 'number? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'integer? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'int? [_ _ _ _] {:type \"integer\" :format \"int64\"})\n(defmethod accept 'pos-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :minimum 1})\n(defmethod accept 'neg-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :maximum -1})\n(defmethod accept 'nat-int? [_ _ _ _] {:type \"integer\", :format \"int64\" :minimum 0})\n(defmethod accept 'float? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'pos? [_ _ _ _] {:type \"number\" :exclusiveMininum 0})\n(defmethod accept 'neg? [_ _ _ _] {:type \"number\" :exclusiveMaximum 0})\n(defmethod accept 'boolean? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'string? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'uuid? [_ _ _ _] {:type \"string\" :format \"uuid\"})\n(defmethod accept 'uri? [_ _ _ _] {:type \"string\" :format \"uri\"})\n(defmethod accept 'decimal? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'inst? [_ _ _ _] {:type \"string\" :format \"date-time\"})\n(defmethod accept 'seqable? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'indexed? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'map? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'vector? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'list? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'seq? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'char? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'set? [_ _ _ _] {:type \"array\" :uniqueItems true})\n(defmethod accept 'nil? [_ _ _ _] {:type \"null\"})\n(defmethod accept 'false? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'true? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'zero? [_ _ _ _] {:type \"integer\"})\n#?(:clj (defmethod accept 'rational? [_ _ _ _] {:type \"double\"}))\n(defmethod accept 'coll? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'empty? [_ _ _ _] {:type \"array\" :maxItems 0 :minItems 0})\n(defmethod accept 'associative? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'sequential? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'ratio? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'bytes? [_ _ _ _] {:type \"string\" :format \"byte\"})\n\n(defmethod accept :> [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMinimum value})\n(defmethod accept :>= [_ _ [value] _] {:type \"number\" :format \"double\" :minimum value})\n(defmethod accept :< [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMaximum value})\n(defmethod accept :<= [_ _ [value] _] {:type \"number\" :format \"double\" :maximum value})\n(defmethod accept := [_ _ _ _] {})\n(defmethod accept :not= [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] {:allOf children})\n(defmethod accept :or [_ _ children _] {:anyOf children})\n\n(defmethod accept ::m/val [_ _ children _] (first children))\n(defmethod accept :map [_ _ children _]\n  (let [required (->> children (filter (m/-comp not :optional second)) (mapv first))]\n    {:type \"object\"\n     :properties (apply array-map (mapcat (fn [[k _ s]] [k s]) children))\n     :required required}))\n\n(defmethod accept :multi [_ _ children _] {:oneOf (mapv last children)})\n(defmethod accept :map-of [_ _ children _] {:type \"object\", :additionalProperties (second children)})\n(defmethod accept :vector [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :sequential [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :set [_ _ children _] {:type \"array\", :items (first children), :uniqueItems true})\n(defmethod accept :enum [_ _ children _] {:enum children})\n(defmethod accept :maybe [_ _ children _] {:oneOf (conj children {:type \"null\"})})\n(defmethod accept :tuple [_ _ children _] {:type \"array\", :items children, :additionalItems false})\n(defmethod accept :re [_ schema _ options] {:type \"string\", :pattern (first (m/children schema options))})\n(defmethod accept :fn [_ _ _ _] {})\n\n(defmethod accept :string [_ schema _ _]\n  (merge {:type \"string\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minLength, :max :maxLength}))))\n\n(defmethod accept :int [_ schema _ _]\n  (merge {:type \"integer\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defmethod accept :double [_ schema _ _]\n  (merge {:type \"number\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defmethod accept :boolean [_ _ _ _] {:type \"boolean\"})\n(defmethod accept :keyword [_ _ _ _] {:type \"string\"})\n(defmethod accept :qualified-keyword [_ _ _ _] {:type \"string\"})\n(defmethod accept :symbol [_ _ _ _] {:type \"string\"})\n(defmethod accept :qualified-symbol [_ _ _ _] {:type \"string\"})\n(defmethod accept :uuid [_ _ _ _] {:type \"string\" :format \"uuid\"})\n\n(defmethod accept :ref [_ schema _ _] (-ref (m/-ref schema)))\n(defmethod accept :schema [_ schema _ options] (-schema schema options))\n(defmethod accept ::m/schema [_ schema _ options] (-schema schema options))\n\n(defmethod accept :merge [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n(defmethod accept :union [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n(defmethod accept :select-keys [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n\n(defn- -json-schema-walker [schema _ children options]\n  (let [p (merge (m/type-properties schema) (m/properties schema))]\n    (or (unlift p :json-schema)\n        (merge (select p)\n               (if (satisfies? JsonSchema schema)\n                 (-accept schema children options)\n                 (accept (m/type schema) schema children options))\n               (unlift-keys p :json-schema)))))\n\n(defn -transform [?schema options] (m/walk ?schema -json-schema-walker options))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (let [definitions (atom {})\n         options (merge options {::m/walk-entry-vals true, ::definitions definitions, ::transform -transform})]\n     (cond-> (-transform ?schema options) (seq @definitions) (assoc :definitions @definitions)))))\n"]}