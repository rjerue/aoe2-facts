{"version":3,"sources":["schema/utils.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","schema.utils/assoc-when","seq47568","G__47572","cljs.core/first","cljs.core/next","self__4723__auto__","m","kvs","js/Error","cljs.core/even?","cljs.core/count","cljs.core.into","or__4126__auto__","iter__4529__auto__","s__47578","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47580","cljs.core/chunk-buffer","i__47579","vec__47583","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47577","cljs.core/chunk-rest","vec__47586","cljs.core/cons","cljs.core/rest","k","v","cljs.core.partition","schema.utils/type-of","x","schema.utils/fn-schema-bearer","f","schema.utils/format*","seq47595","G__47596","fmt","args","cljs.core.apply","goog.string/format","schema.utils/value-name","value","t","cljs.core.symbol","schema.utils/memoize-id","cljs.core/memoize","schema.utils/record?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IRecord","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","schema.utils/ValidationError","schema.utils/->ValidationError","schema","expectation-delay","fail-explanation","this","writer","opts","cljs.core/-pr-writer","schema.utils/validation-error-explain","err","cljs.core/List","cljs.core/deref","schema.utils/make-ValidationError","schema.utils/NamedError","schema.utils/->NamedError","name","error","schema.utils/named-error-explain","this__4380__auto__","k__4381__auto__","this__4382__auto__","k47622","else__4383__auto__","G__47632","cljs.core/Keyword","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__47634","vec__47635","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__47621","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this47623","other47624","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__47653","cljs.core/keyword-identical?","expr__47654","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-conj","schema.utils/ErrorContainer","this__4423__auto__","writer__4424__auto__","G__47627","extmap__4419__auto__","G__47669","cljs.core/record?","schema.utils/->ErrorContainer","schema.utils/map->ErrorContainer","schema.utils/error","schema.utils/error?","schema.utils/error-val","schema.utils/wrap-error-name","maybe-error","temp__5733__auto__","e","schema.utils/result-builder","lift-to-error","cljs.core.conj","merr","schema.utils/declare-class-schema!","klass","schema.utils/class-schema","schema$utils$PSimpleCell$get_cell$dyn","x__4428__auto__","m__4429__auto__","schema.utils/get_cell","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","schema$utils$PSimpleCell$set_cell$dyn","schema.utils/set_cell","schema.utils/PSimpleCell","schema.utils/SimpleVCell","schema.utils/->SimpleVCell","q","schema.utils/use-fn-validation","cljs.core.partial","cljs.core/chunk-first"],"sourcesContent":["(ns schema.utils\n  \"Private utilities used in schema implementation.\"\n  (:refer-clojure :exclude [record?])\n         (:require goog.string.format [goog.string :as gstring]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Miscellaneous helpers\n\n(defn assoc-when\n  \"Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.\"\n  [m & kvs]\n  (assert (even? (count kvs)))\n  (into (or m {})\n        (for [[k v] (partition 2 kvs)\n              :when v]\n          [k v])))\n\n(defn type-of [x]\n                 \n         (js* \"typeof ~{}\" x))\n\n(defn fn-schema-bearer\n  \"What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.\"\n  [f]\n                 \n         f)\n\n(defn format* [fmt & args]\n  (apply                     gstring/format fmt args))\n\n(defn value-name\n  \"Provide a descriptive short name for a value.\"\n  [value]\n  (let [t (type-of value)]\n    (if (< (count (str value)) 20)\n      value\n      (symbol (str \"a-\"                                  t)))))\n\n(defn memoize-id\n  \"Identity version of memoize, because many schemas are records, and records\n   don't cache their hash codes (at least in Clojure 1.5.1).\n   Not thread safe, and doesn't cache falsey values.\"\n  [f]\n                                             \n                 \n                          \n                                \n                                \n                         \n         (memoize f))\n\n(defn record? [x]\n                                          \n         (satisfies? IRecord x))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Error descriptions\n\n;; A leaf schema validation error, describing the schema and value and why it failed to\n;; match the schema.  In Clojure, prints like a form describing the failure that would\n;; return true.\n\n(declare validation-error-explain)\n\n(deftype ValidationError [schema value expectation-delay fail-explanation]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (validation-error-explain this) writer opts)))\n\n(defn validation-error-explain [^ValidationError err]\n  (list (or (.-fail-explanation err) 'not) @(.-expectation-delay err)))\n\n                                                                   \n                                                    \n                                                       \n\n(defn make-ValidationError\n  \"for cljs sake (easier than normalizing imports in macros.clj)\"\n  [schema value expectation-delay fail-explanation]\n  (ValidationError. schema value expectation-delay fail-explanation))\n\n\n;; Attach a name to an error from a named schema.\n(declare named-error-explain)\n\n(deftype NamedError [name error]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (named-error-explain this) writer opts)))\n\n(defn named-error-explain [^NamedError err]\n  (list 'named (.-error err) (.-name err)))\n\n                                                                   \n                                               \n                                                  \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Monoidish error containers, which wrap errors (to distinguish from success values).\n\n(defrecord ErrorContainer [error])\n\n(defn error\n  \"Distinguish a value (must be non-nil) as an error.\"\n  [x] (assert x) (->ErrorContainer x))\n\n(defn error? [x]\n  (instance? ErrorContainer x))\n\n(defn error-val [x]\n  (when (error? x)\n    (.-error ^ErrorContainer x)))\n\n(defn wrap-error-name\n  \"If maybe-error is an error, wrap the inner value in a NamedError; otherwise, return as-is\"\n  [name maybe-error]\n  (if-let [e (error-val maybe-error)]\n    (error (NamedError. name e))\n    maybe-error))\n\n(defn result-builder\n  \"Build up a result by conjing values, producing an error if at least one\n   sub-value returns an error.\"\n  [lift-to-error]\n  (fn conjer [m e]\n    (if-let [err (error-val e)]\n      (error (conj (or (error-val m) (lift-to-error m)) err))\n      (if-let [merr (error-val m)]\n        (error (conj merr nil))\n        (conj m e)))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Registry for attaching schemas to classes, used for defn and defrecord\n\n     \n                                                                                \n                                                                                             \n                                                                                         \n                      \n                                            \n                                                                                     \n                                                                              \n                                                                      \n                                                 \n                          \n                                                                                   \n                                         \n\n                            \n                                                                       \n                                   \n\n      \n(do\n  (defn declare-class-schema! [klass schema]\n    (aset klass \"schema$utils$schema\" schema))\n\n  (defn class-schema [klass]\n    (aget klass \"schema$utils$schema\")))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Utilities for fast-as-possible reference to use to turn fn schema validation on/off\n\n     \n                         \n                        \n                          \n\n      \n(defprotocol PSimpleCell\n  (get_cell [this])\n  (set_cell [this x]))\n\n\n;; adds ~5% overhead compared to no check\n(deftype SimpleVCell [^:volatile-mutable ^boolean q]\n  PSimpleCell\n  (get_cell [this] q)\n  (set_cell [this x] (set! q x)))\n\n(def ^schema.utils.PSimpleCell use-fn-validation\n  \"Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false.\"\n  (SimpleVCell. false))\n\n      \n(do\n  (set! (.-get_cell use-fn-validation) (partial get_cell use-fn-validation))\n  (set! (.-set_cell use-fn-validation) (partial set_cell use-fn-validation)))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/utils.cljx\n"]}